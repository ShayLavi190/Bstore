{"ast":null,"code":"var _jsxFileName = \"/Users/shaylavi/Desktop/bstore/src/context/shop-context.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShopContext = /*#__PURE__*/createContext(null);\nexport const ShopContextProvider = props => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState({});\n\n  // Fetch products from the server and update the state\n  const fetchProducts = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:6500/products\");\n      const fetchedProducts = response.data.products;\n      setProducts(fetchedProducts);\n      fetchedProducts.forEach(async product => {\n        if (product.notify && product.notify.length > 0) {\n          product.notify.forEach(email => {\n            console.log(`Sending email to ${email} for product ${product.name}`);\n          });\n          product.notify = [];\n          await updateProduct(product._id, product);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n    }\n  };\n\n  // Update a product with new data\n  const updateProduct = async (prod_id, updatedProductData) => {\n    try {\n      const response = await axios.put(`http://localhost:6500/products/${prod_id}`, updatedProductData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      return null;\n    }\n  };\n\n  // Add an item to the cart\n  const addToCart = (itemId, askAmount) => {\n    const product = products.find(product => product.prod_id === itemId);\n    if (!product) {\n      console.error(`Product with ID ${itemId} not found.`);\n      return;\n    }\n    if (product.quntity - askAmount <= 0) {\n      alert(\"Sorry, this product is out of stock.\");\n      return;\n    }\n    setCartItems(prevCartItems => {\n      const updatedCartItems = {\n        ...prevCartItems\n      };\n      updatedCartItems[itemId] = updatedCartItems[itemId] ? updatedCartItems[itemId] + 1 : 1;\n      return updatedCartItems;\n    });\n    updateProduct(itemId, {\n      ...product,\n      quntity: product.quntity - 1\n    });\n    alert(\"Item added to cart\");\n  };\n\n  // Remove an item from the cart\n  const removeFromCart = itemId => {\n    setCartItems(prevCartItems => {\n      const updatedCartItems = {\n        ...prevCartItems\n      };\n      updatedCartItems[itemId] = updatedCartItems[itemId] ? updatedCartItems[itemId] - 1 : 0;\n      return updatedCartItems;\n    });\n  };\n\n  // Update the count of an item in the cart\n  const updateCartItemCount = (newAmount, itemId) => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: newAmount\n    }));\n  };\n\n  // Clear the cart\n  const checkout = () => {\n    setCartItems({});\n  };\n  const contextValue = {\n    cartItems,\n    addToCart,\n    updateCartItemCount,\n    removeFromCart,\n    checkout,\n    products\n  };\n  return /*#__PURE__*/_jsxDEV(ShopContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(ShopContextProvider, \"T+QrZ58eL0ScFs/vzXT8guWA5sY=\");\n_c = ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["axios","React","createContext","useEffect","useState","jsxDEV","_jsxDEV","ShopContext","ShopContextProvider","props","_s","products","setProducts","cartItems","setCartItems","fetchProducts","response","get","fetchedProducts","data","forEach","product","notify","length","email","console","log","name","updateProduct","_id","error","prod_id","updatedProductData","put","addToCart","itemId","askAmount","find","quntity","alert","prevCartItems","updatedCartItems","removeFromCart","updateCartItemCount","newAmount","prev","checkout","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shaylavi/Desktop/bstore/src/context/shop-context.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\n\nexport const ShopContext = createContext(null);\n\nexport const ShopContextProvider = (props) => {\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState({});\n\n  // Fetch products from the server and update the state\n  const fetchProducts = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:6500/products\");\n      const fetchedProducts = response.data.products;\n      setProducts(fetchedProducts);\n\n      fetchedProducts.forEach(async (product) => {\n        if (product.notify && product.notify.length > 0) {\n          product.notify.forEach((email) => {\n            console.log(`Sending email to ${email} for product ${product.name}`);\n          });\n\n          product.notify = [];\n          await updateProduct(product._id, product);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n    }\n  };\n\n  // Update a product with new data\n  const updateProduct = async (prod_id, updatedProductData) => {\n    try {\n      const response = await axios.put(\n        `http://localhost:6500/products/${prod_id}`,\n        updatedProductData\n      );\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      return null;\n    }\n  };\n\n  // Add an item to the cart\n  const addToCart = (itemId, askAmount) => {\n    const product = products.find((product) => product.prod_id === itemId);\n    if (!product) {\n      console.error(`Product with ID ${itemId} not found.`);\n      return;\n    }\n    if (product.quntity - askAmount <= 0) {\n      alert(\"Sorry, this product is out of stock.\");\n      return;\n    }\n    setCartItems((prevCartItems) => {\n      const updatedCartItems = { ...prevCartItems };\n      updatedCartItems[itemId] = updatedCartItems[itemId]\n        ? updatedCartItems[itemId] + 1\n        : 1;\n      return updatedCartItems;\n    });\n\n    updateProduct(itemId, { ...product, quntity: product.quntity - 1 });\n\n    alert(\"Item added to cart\");\n  };\n\n  // Remove an item from the cart\n  const removeFromCart = (itemId) => {\n    setCartItems((prevCartItems) => {\n      const updatedCartItems = { ...prevCartItems };\n      updatedCartItems[itemId] = updatedCartItems[itemId]\n        ? updatedCartItems[itemId] - 1\n        : 0;\n      return updatedCartItems;\n    });\n  };\n\n  // Update the count of an item in the cart\n  const updateCartItemCount = (newAmount, itemId) => {\n    setCartItems((prev) => ({ ...prev, [itemId]: newAmount }));\n  };\n\n  // Clear the cart\n  const checkout = () => {\n    setCartItems({});\n  };\n\n  const contextValue = {\n    cartItems,\n    addToCart,\n    updateCartItemCount,\n    removeFromCart,\n    checkout,\n    products,\n  };\n\n  return (\n    <ShopContext.Provider value={contextValue}>\n      {props.children}\n    </ShopContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}