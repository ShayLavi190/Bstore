{"ast":null,"code":"var _jsxFileName = \"/Users/shaylavi/Desktop/bstore/src/context/shop-context.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport emailjs from '@emailjs/browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShopContext = /*#__PURE__*/createContext(null);\n// ShopContextProvider component to provide the context to the app\nexport const ShopContextProvider = props => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState({});\n  useEffect(() => {\n    fetchProducts();\n    const interval = setInterval(fetchProducts, 60000);\n    return () => clearInterval(interval);\n  }, []);\n  // Function to fetch products from the database\n  const fetchProducts = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:6500/products\");\n      const fetchedProducts = response.data.products;\n      setProducts(fetchedProducts);\n      const serviceId = \"service_lxiaq84\";\n      const templateId = \"template_kzggrep\";\n      emailjs.init(\"98g7Qzscyfz-S-J7p\");\n      for (const product of fetchedProducts) {\n        if (product.notify && product.notify.length > 0 && product.quntity > 0) {\n          for (const email of product.notify) {\n            try {\n              await emailjs.send(serviceId, templateId, {\n                email: email,\n                name: product.name\n              });\n              console.log(\"Email sent to:\", email);\n            } catch (error) {\n              console.log(error);\n            }\n          }\n          product.notify = [];\n          console.log(\"Product updated:\", product);\n          updateProduct(product._id, product);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n    }\n  };\n\n  // Function to update the product in the database\n  const updateProduct = async (prod_id, updatedProductData) => {\n    try {\n      console.log(updatedProductData);\n      const response = await axios.put(`http://localhost:6500/products/${prod_id}`, updatedProductData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating product:', error);\n      return null;\n    }\n  };\n\n  // Function to add the product to the cart\n  const addToCart = (itemId, askAmount) => {\n    const product = products.find(product => product.prod_id === itemId);\n    if (!product) {\n      console.error(`Product with ID ${itemId} not found.`);\n      return;\n    }\n    if (product.quntity - askAmount <= 0) {\n      alert('Sorry, this product is out of stock.');\n      return;\n    }\n    setCartItems(prevCartItems => {\n      const updatedCartItems = {\n        ...prevCartItems\n      };\n      updatedCartItems[itemId] = updatedCartItems[itemId] ? updatedCartItems[itemId] + 1 : 1;\n      return updatedCartItems;\n    });\n    if (product.quntity - 1 <= 0) {\n      product.isInStock = false;\n    }\n    updateProduct(itemId, {\n      ...product,\n      quntity: product.quntity - 1,\n      isInStock: product.isInStock\n    });\n    alert(\"Item added to cart\");\n  };\n\n  // Function to remove the product from the cart\n  const removeFromCart = itemId => {\n    const product = products.find(product => product.prod_id === itemId);\n    setCartItems(prevCartItems => {\n      const updatedCartItems = {\n        ...prevCartItems\n      };\n      updatedCartItems[itemId] = updatedCartItems[itemId] ? updatedCartItems[itemId] - 1 : 0;\n      return updatedCartItems;\n    });\n    if (product.quntity + 1 > 0) {\n      product.isInStock = true;\n    }\n    updateProduct(itemId, {\n      ...product,\n      quntity: product.quntity + 1,\n      isInStock: product.isInStock\n    });\n  };\n  // Function to update the quantity of the product in the cart\n  const updateCartItemCount = (newAmount, itemId) => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: newAmount\n    }));\n  };\n  // Function to checkout the cart\n  const checkout = () => {\n    setCartItems({});\n  };\n  const contextValue = {\n    cartItems,\n    addToCart,\n    updateCartItemCount,\n    removeFromCart,\n    checkout,\n    products\n  };\n  return /*#__PURE__*/_jsxDEV(ShopContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ShopContextProvider, \"Rxl7v7iBpujQJ1zvH9Toucmduc0=\");\n_c = ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["axios","React","createContext","useEffect","useState","emailjs","jsxDEV","_jsxDEV","ShopContext","ShopContextProvider","props","_s","products","setProducts","cartItems","setCartItems","fetchProducts","interval","setInterval","clearInterval","response","get","fetchedProducts","data","serviceId","templateId","init","product","notify","length","quntity","email","send","name","console","log","error","updateProduct","_id","prod_id","updatedProductData","put","addToCart","itemId","askAmount","find","alert","prevCartItems","updatedCartItems","isInStock","removeFromCart","updateCartItemCount","newAmount","prev","checkout","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shaylavi/Desktop/bstore/src/context/shop-context.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport emailjs from '@emailjs/browser';\n\nexport const ShopContext = createContext(null);\n// ShopContextProvider component to provide the context to the app\nexport const ShopContextProvider = (props) => {\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState({});\n  useEffect(() => {\n    fetchProducts(); \n    const interval = setInterval(fetchProducts, 60000); \n\n    return () => clearInterval(interval);\n  }, []);\n// Function to fetch products from the database\nconst fetchProducts = async () => {\n  try {\n      const response = await axios.get(\"http://localhost:6500/products\");\n      const fetchedProducts = response.data.products;\n      setProducts(fetchedProducts);\n      const serviceId = \"service_lxiaq84\";\n      const templateId = \"template_kzggrep\";\n      emailjs.init(\"98g7Qzscyfz-S-J7p\")\n      for (const product of fetchedProducts) {\n          if (product.notify && product.notify.length > 0 && product.quntity > 0) {\n              for (const email of product.notify) {\n                  try {\n                      await emailjs.send(serviceId, templateId, {\n                          email: email,\n                          name: product.name,});\n                          console.log(\"Email sent to:\", email);\n                  } catch (error) {\n                      console.log(error);\n                  }\n              }\n              product.notify = [];\n              console.log(\"Product updated:\", product);\n              updateProduct(product._id, product);\n          }\n      }\n  } catch (error) {\n      console.error(\"Error fetching products:\", error);\n  }\n};\n\n// Function to update the product in the database\n  const updateProduct = async (prod_id, updatedProductData) => {\n    try {\n      console.log(updatedProductData);\n      const response = await axios.put(`http://localhost:6500/products/${prod_id}`, updatedProductData);\n      return response.data; \n    } catch (error) {\n      console.error('Error updating product:', error);\n      return null;\n    }\n  };\n\n// Function to add the product to the cart\n  const addToCart = (itemId,askAmount) => {\n    const product = products.find((product) => product.prod_id === itemId);\n    if (!product) {\n      console.error(`Product with ID ${itemId} not found.`);\n      return;\n    }\n    if (product.quntity-askAmount <= 0) {\n      alert('Sorry, this product is out of stock.');\n      return;\n    }\n    setCartItems((prevCartItems) => {\n      const updatedCartItems = { ...prevCartItems };\n      updatedCartItems[itemId] = updatedCartItems[itemId] ? updatedCartItems[itemId] + 1 : 1;\n      return updatedCartItems;\n    });\n    if(product.quntity-1<=0){\n      product.isInStock = false;\n    }\n    updateProduct(itemId, { ...product, quntity: product.quntity - 1 ,isInStock:product.isInStock});\n  \n    alert(\"Item added to cart\");\n  };\n  \n// Function to remove the product from the cart\n  const removeFromCart = (itemId) => {\n    const product = products.find((product) => product.prod_id === itemId);\n    setCartItems((prevCartItems) => {\n      const updatedCartItems = { ...prevCartItems };\n      updatedCartItems[itemId] = updatedCartItems[itemId] ? updatedCartItems[itemId] - 1 : 0;\n      return updatedCartItems;\n    });\n    if(product.quntity+1>0){\n      product.isInStock = true;\n    }\n    updateProduct(itemId, { ...product, quntity: product.quntity + 1,isInStock:product.isInStock });\n  };\n// Function to update the quantity of the product in the cart\n  const updateCartItemCount = (newAmount, itemId) => {\n    setCartItems((prev) => ({ ...prev, [itemId]: newAmount }));\n  };\n// Function to checkout the cart\n  const checkout = () => {\n    setCartItems({});\n  };\n\n  const contextValue = {\n    cartItems,\n    addToCart,\n    updateCartItemCount,\n    removeFromCart,\n    checkout,\n    products,\n  };\n\n  return (\n    <ShopContext.Provider value={contextValue}>\n      {props.children}\n    </ShopContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}